{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAY,SAAS,gBAAgB,CAAC,YACtC,EAAY,SAAS,aAAa,CAAC,SACnC,EAAgB,EAAG,SAAS,gBAAgB,CAAC,aAAa,GAAG,CACjE,SAAC,CADH,EACU,OAAA,EAAG,WAAW,A,GAGxB,SAAS,gBAAgB,CAAC,YAAY,OAAO,CAAC,SAAC,CAA/C,EACE,EAAO,gBAAgB,CAAC,QAAS,SAAC,CAAlC,EAEE,IAsBc,EAAM,EAChB,EAvBE,GAsBQ,EAbR,EAVqB,GAUZ,GAAG,CAAC,SAAC,CAAtB,EACE,IAAM,EAAU,CAAC,EAQjB,OANC,EAAG,EAAI,KAAK,EAAE,OAAO,CAAC,SAAC,CAAA,CAAM,CAA7B,EAGC,CAAO,CAFQ,AAdqB,CAcd,CAAC,EAAM,CAEd,CAAG,EAAK,WAAW,AACpC,GAEO,CACT,GAIM,EAAiB,AAAW,YADZ,EAtBoB,EAAE,MAAM,CAAC,WAAW,EAyBvD,EAAK,IAAI,CAAC,SAAC,CAAA,CAAM,CAAxB,SACE,AAAI,EAIK,AAHQ,CAAI,CAAC,EAAO,CAAC,OAAO,CAAC,IAAK,IAAI,OAAO,CAAC,IAAK,IAC3C,CAAI,CAAC,EAAO,CAAC,OAAO,CAAC,IAAK,IAAI,OAAO,CAAC,IAAK,IAKrD,CAAI,CAAC,EAAO,CAAC,aAAa,CAAC,CAAI,CAAC,EAAO,CAChD,GAhCE,CAAA,EAAU,SAAS,CAAG,GAEtB,AAiCJ,SAA0B,CAAI,EACvB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmB,CAAnB,IAAM,EAAN,EAAA,KAAA,CACG,EAAK,SAAS,aAAa,CAAC,MAElC,IAAK,IAAM,KAAO,EAAK,CACrB,IAAM,EAAK,SAAS,aAAa,CAAC,KAElC,CAAA,EAAG,WAAW,CAAG,CAAG,CAAC,EAAI,CAEzB,EAAG,WAAW,CAAC,EACjB,CAEA,EAAU,WAAW,CAAC,EACxB,C,C,M,E,CAZK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAaP,EA/CqB,EACnB,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar tBodyRows = document.querySelectorAll(\"tbody tr\");\nvar tableBody = document.querySelector(\"tbody\");\nvar tableHeaders = _to_consumable_array(document.querySelectorAll(\"thead th\")).map(function(th) {\n    return th.textContent;\n});\ndocument.querySelectorAll(\"thead th\").forEach(function(header) {\n    header.addEventListener(\"click\", function(e) {\n        var mappedRows = mapData(tBodyRows, tableHeaders);\n        var sortedRows = sortData(mappedRows, e.target.textContent);\n        tableBody.innerHTML = \"\";\n        insertSortedRows(sortedRows);\n    });\n});\nfunction mapData(rows, headers) {\n    return _to_consumable_array(rows).map(function(row) {\n        var rowData = {};\n        _to_consumable_array(row.cells).forEach(function(cell, index) {\n            var header = headers[index];\n            rowData[header] = cell.textContent;\n        });\n        return rowData;\n    });\n}\nfunction sortData(data, header) {\n    var isSalaryColumn = header === \"Salary\";\n    return data.sort(function(rowA, rowB) {\n        if (isSalaryColumn) {\n            var valueA = rowA[header].replace(\"$\", \"\").replace(\",\", \"\");\n            var valueB = rowB[header].replace(\"$\", \"\").replace(\",\", \"\");\n            return valueA - valueB;\n        }\n        return rowA[header].localeCompare(rowB[header]);\n    });\n}\nfunction insertSortedRows(data) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var tr = document.createElement(\"tr\");\n            for(var key in row){\n                var td = document.createElement(\"td\");\n                td.textContent = row[key];\n                tr.appendChild(td);\n            }\n            tableBody.appendChild(tr);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=index.1d911ac7.js.map\n","'use strict';\n\nconst tBodyRows = document.querySelectorAll('tbody tr');\nconst tableBody = document.querySelector('tbody');\nconst tableHeaders = [...document.querySelectorAll('thead th')].map(\n  (th) => th.textContent,\n);\n\ndocument.querySelectorAll('thead th').forEach((header) => {\n  header.addEventListener('click', (e) => {\n    const mappedRows = mapData(tBodyRows, tableHeaders);\n    const sortedRows = sortData(mappedRows, e.target.textContent);\n\n    tableBody.innerHTML = '';\n\n    insertSortedRows(sortedRows);\n  });\n});\n\nfunction mapData(rows, headers) {\n  return [...rows].map((row) => {\n    const rowData = {};\n\n    [...row.cells].forEach((cell, index) => {\n      const header = headers[index];\n\n      rowData[header] = cell.textContent;\n    });\n\n    return rowData;\n  });\n}\n\nfunction sortData(data, header) {\n  const isSalaryColumn = header === 'Salary';\n\n  return data.sort((rowA, rowB) => {\n    if (isSalaryColumn) {\n      const valueA = rowA[header].replace('$', '').replace(',', '');\n      const valueB = rowB[header].replace('$', '').replace(',', '');\n\n      return valueA - valueB;\n    }\n\n    return rowA[header].localeCompare(rowB[header]);\n  });\n}\n\nfunction insertSortedRows(data) {\n  for (const row of data) {\n    const tr = document.createElement('tr');\n\n    for (const key in row) {\n      const td = document.createElement('td');\n\n      td.textContent = row[key];\n\n      tr.appendChild(td);\n    }\n\n    tableBody.appendChild(tr);\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","tBodyRows","document","querySelectorAll","tableBody","querySelector","tableHeaders","map","th","textContent","forEach","header","addEventListener","e","data","isSalaryColumn","sortedRows","row","rowData","cells","cell","index","headers","target","sort","rowA","rowB","valueA","replace","localeCompare","innerHTML","insertSortedRows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","value","tr","createElement","key","td","appendChild","err","return"],"version":3,"file":"index.1d911ac7.js.map"}